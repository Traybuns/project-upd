name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: aws-project-1
  ECS_CLUSTER: project-1-ecs-cluster
  ECS_SERVICE: project-1-ecs-service
  ECS_TASK_DEFINITION: project-1-task-definition
  CONTAINER_NAME: aws-project-1

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Create ECS Cluster (if not exists)
        run: |
          CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --query "clusters[*].clusterName" --output text || echo "not found")
          if [ "$CLUSTER_EXISTS" != "${{ env.ECS_CLUSTER }}" ]; then
            echo "Creating ECS Cluster..."
            aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }}
          else
            echo "ECS Cluster already exists."
          fi

      - name: Register Task Definition (overwrite existing)
        run: |
          echo "Registering task definition from task.json..."
          aws ecs register-task-definition --cli-input-json file://task.json

      - name: Ensure ECS Service Exists
        run: |
          SERVICE_EXISTS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query "services[0].status" --output text 2>/dev/null || echo "MISSING")
          if [ "$SERVICE_EXISTS" == "MISSING" ]; then
            echo "Creating ECS Service..."
            aws ecs create-service --cluster ${{ env.ECS_CLUSTER }} --service-name ${{ env.ECS_SERVICE }} \
              --task-definition ${{ env.ECS_TASK_DEFINITION }} --desired-count 1 --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-063539757770adda6],securityGroups=[sg-01666ea95d0960a69],assignPublicIp=ENABLED}"
          else
            echo "ECS Service already exists."
          fi

      # - name: Download ECS task definition
      #   run: |
      #     aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
      #     --query 'taskDefinition | {family: .family, networkMode: .networkMode, requiresCompatibilities: .requiresCompatibilities, cpu: .cpu, memory: .memory, executionRoleArn: .executionRoleArn, taskRoleArn: .taskRoleArn, containerDefinitions: .containerDefinitions}' \
      #     > task-definition.json

      - name: Update ECS task definition with new image
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
